name: Sync API to Postman

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Generate OpenAPI documentation from Laravel
  generate-docs:
    name: Generate OpenAPI documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          coverage: none

      - name: Install Composer dependencies
        run: cd src && composer install --no-interaction --prefer-dist --no-progress

      - name: Create sqlite database
        run: cd src && touch database/database.sqlite

      - name: Generate OpenAPI documentation
        run: cd src && php artisan doc:generate

      - name: Upload OpenAPI file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: src/storage/app/private/documentation/openapi.yaml
          retention-days: 1

  # Sync to Postman (Production - main branch)
  sync-production:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    name: Sync to Postman (Production)
    runs-on: ubuntu-latest
    needs: generate-docs
    steps:
      - name: Download OpenAPI artifact
        uses: actions/download-artifact@v4
        with:
          name: openapi-spec

      - name: Update Postman API schema
        run: |
          # For v10 APIs, we update the schema file directly
          # Get the list of schema files for this API
          SCHEMAS=$(curl --request GET \
            --url "https://api.getpostman.com/apis/${{ secrets.POSTMAN_API_ID_MAIN }}" \
            --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            --header "Accept: application/vnd.api.v10+json" \
            --silent)

          SCHEMA_ID=$(echo "$SCHEMAS" | jq -r '.api.schemas[0].id // empty')

          if [ -z "$SCHEMA_ID" ]; then
            echo "No schema found, creating new schema..."
            # Create new schema
            RESPONSE=$(curl --request POST \
              --url "https://api.getpostman.com/apis/${{ secrets.POSTMAN_API_ID_MAIN }}/schemas" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --header "Accept: application/vnd.api.v10+json" \
              --header "Content-Type: application/json" \
              --silent \
              --write-out "\nHTTP_STATUS:%{http_code}" \
              --data "{
                \"schema\": {
                  \"type\": \"openapi3\",
                  \"language\": \"yaml\",
                  \"schema\": $(cat openapi.yaml | jq -Rs .)
                }
              }")

            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "201" ]; then
              echo "❌ Failed to create schema"
              echo "$RESPONSE" | sed '/HTTP_STATUS/d'
              exit 1
            fi
            echo "✅ Schema created successfully"
          else
            echo "Updating existing schema: $SCHEMA_ID"
            # Update existing schema
            RESPONSE=$(curl --request PUT \
              --url "https://api.getpostman.com/apis/${{ secrets.POSTMAN_API_ID_MAIN }}/schemas/$SCHEMA_ID" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --header "Accept: application/vnd.api.v10+json" \
              --header "Content-Type: application/json" \
              --silent \
              --write-out "\nHTTP_STATUS:%{http_code}" \
              --data "{
                \"schema\": {
                  \"type\": \"openapi3\",
                  \"language\": \"yaml\",
                  \"schema\": $(cat openapi.yaml | jq -Rs .)
                }
              }")

            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            if [ "$HTTP_STATUS" != "200" ]; then
              echo "❌ Failed to update schema"
              echo "$RESPONSE" | sed '/HTTP_STATUS/d'
              exit 1
            fi
            echo "✅ Schema updated successfully"
          fi

          echo "✅ Production API updated successfully"

  # Sync to Postman (Development - dev branch)
  sync-dev:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/dev' }}
    name: Sync to Postman (Dev)
    runs-on: ubuntu-latest
    needs: generate-docs
    steps:
      - name: Download OpenAPI artifact
        uses: actions/download-artifact@v4
        with:
          name: openapi-spec

      - name: Update Postman API schema
        run: |
          # For v10 APIs, we update the schema file directly
          # Get the list of schema files for this API
          SCHEMAS=$(curl --request GET \
            --url "https://api.getpostman.com/apis/${{ secrets.POSTMAN_API_ID_DEV }}" \
            --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            --header "Accept: application/vnd.api.v10+json" \
            --silent)

          SCHEMA_ID=$(echo "$SCHEMAS" | jq -r '.api.schemas[0].id // empty')

          if [ -z "$SCHEMA_ID" ]; then
            echo "No schema found, creating new schema..."
            # Create new schema
            RESPONSE=$(curl --request POST \
              --url "https://api.getpostman.com/apis/${{ secrets.POSTMAN_API_ID_DEV }}/schemas" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --header "Accept: application/vnd.api.v10+json" \
              --header "Content-Type: application/json" \
              --silent \
              --write-out "\nHTTP_STATUS:%{http_code}" \
              --data "{
                \"schema\": {
                  \"type\": \"openapi3\",
                  \"language\": \"yaml\",
                  \"schema\": $(cat openapi.yaml | jq -Rs .)
                }
              }")

            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "201" ]; then
              echo "❌ Failed to create schema"
              echo "$RESPONSE" | sed '/HTTP_STATUS/d'
              exit 1
            fi
            echo "✅ Schema created successfully"
          else
            echo "Updating existing schema: $SCHEMA_ID"
            # Update existing schema
            RESPONSE=$(curl --request PUT \
              --url "https://api.getpostman.com/apis/${{ secrets.POSTMAN_API_ID_DEV }}/schemas/$SCHEMA_ID" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --header "Accept: application/vnd.api.v10+json" \
              --header "Content-Type: application/json" \
              --silent \
              --write-out "\nHTTP_STATUS:%{http_code}" \
              --data "{
                \"schema\": {
                  \"type\": \"openapi3\",
                  \"language\": \"yaml\",
                  \"schema\": $(cat openapi.yaml | jq -Rs .)
                }
              }")

            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            if [ "$HTTP_STATUS" != "200" ]; then
              echo "❌ Failed to update schema"
              echo "$RESPONSE" | sed '/HTTP_STATUS/d'
              exit 1
            fi
            echo "✅ Schema updated successfully"
          fi

          echo "✅ Development API updated successfully"

  # Sync to Postman (Pull Request)
  sync-pr:
    if: ${{ github.event_name == 'pull_request' }}
    name: Sync to Postman (PR)
    runs-on: ubuntu-latest
    needs: generate-docs
    steps:
      - name: Download OpenAPI artifact
        uses: actions/download-artifact@v4
        with:
          name: openapi-spec

      - name: Create or update PR API in Postman
        id: postman-sync
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_API_NAME="Laravel API - PR #${PR_NUMBER}"

          # Check if API already exists for this PR
          # We'll store the API ID in the PR comment and retrieve it
          # For now, try to create a new API

          echo "Creating Postman API for PR #${PR_NUMBER}..."

          CREATE_RESPONSE=$(curl --request POST \
            --url "https://api.getpostman.com/apis" \
            --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            --header "Content-Type: application/json" \
            --silent \
            --data "{
              \"api\": {
                \"name\": \"${PR_API_NAME}\",
                \"summary\": \"Pull Request #${PR_NUMBER} - Auto-generated OpenAPI documentation\"
              }
            }")

          PR_API_ID=$(echo "$CREATE_RESPONSE" | jq -r '.api.id // empty')

          # If creation failed, it might already exist - we need to find it
          if [ -z "$PR_API_ID" ]; then
            echo "API creation returned empty ID, checking if it already exists..."
            # List all APIs and find the one matching our PR
            ALL_APIS=$(curl --request GET \
              --url "https://api.getpostman.com/apis" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --silent)

            PR_API_ID=$(echo "$ALL_APIS" | jq -r ".apis[] | select(.name == \"${PR_API_NAME}\") | .id // empty" | head -1)
          fi

          if [ -z "$PR_API_ID" ]; then
            echo "❌ Failed to create or find PR API"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi

          echo "✅ Using API ID: $PR_API_ID"
          echo "api_id=${PR_API_ID}" >> $GITHUB_OUTPUT
          echo "api_name=${PR_API_NAME}" >> $GITHUB_OUTPUT

          # Now create or update the schema
          SCHEMAS=$(curl --request GET \
            --url "https://api.getpostman.com/apis/${PR_API_ID}" \
            --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            --header "Accept: application/vnd.api.v10+json" \
            --silent)

          SCHEMA_ID=$(echo "$SCHEMAS" | jq -r '.api.schemas[0].id // empty')

          if [ -z "$SCHEMA_ID" ]; then
            echo "Creating new schema..."
            RESPONSE=$(curl --request POST \
              --url "https://api.getpostman.com/apis/${PR_API_ID}/schemas" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --header "Accept: application/vnd.api.v10+json" \
              --header "Content-Type: application/json" \
              --silent \
              --write-out "\nHTTP_STATUS:%{http_code}" \
              --data "{
                \"schema\": {
                  \"type\": \"openapi3\",
                  \"language\": \"yaml\",
                  \"schema\": $(cat openapi.yaml | jq -Rs .)
                }
              }")

            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "201" ]; then
              echo "❌ Failed to create schema"
              echo "$RESPONSE" | sed '/HTTP_STATUS/d'
              exit 1
            fi
            echo "✅ Schema created successfully"
          else
            echo "Updating existing schema: $SCHEMA_ID"
            RESPONSE=$(curl --request PUT \
              --url "https://api.getpostman.com/apis/${PR_API_ID}/schemas/$SCHEMA_ID" \
              --header "X-API-Key: ${{ secrets.POSTMAN_API_KEY }}" \
              --header "Accept: application/vnd.api.v10+json" \
              --header "Content-Type: application/json" \
              --silent \
              --write-out "\nHTTP_STATUS:%{http_code}" \
              --data "{
                \"schema\": {
                  \"type\": \"openapi3\",
                  \"language\": \"yaml\",
                  \"schema\": $(cat openapi.yaml | jq -Rs .)
                }
              }")

            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            if [ "$HTTP_STATUS" != "200" ]; then
              echo "❌ Failed to update schema"
              echo "$RESPONSE" | sed '/HTTP_STATUS/d'
              exit 1
            fi
            echo "✅ Schema updated successfully"
          fi

          echo "✅ PR API updated successfully"

      - name: Find existing Postman comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- POSTMAN_SYNC_COMMENT -->'

      - name: Comment PR with Postman link
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            <!-- POSTMAN_SYNC_COMMENT -->
            ## 📮 Postman API Updated

            **API Name:** `${{ steps.postman-sync.outputs.api_name }}`
            **API ID:** `${{ steps.postman-sync.outputs.api_id }}`

            This PR's OpenAPI documentation has been synced to a dedicated Postman API. You can:
            - View and test the API in your Postman workspace
            - Import the API to test endpoints
            - See the OpenAPI schema updates

            > **Note:** The API `${{ steps.postman-sync.outputs.api_name }}` will be automatically deleted when this PR is closed.

            ---

            *🤖 This comment updates automatically on every push*
